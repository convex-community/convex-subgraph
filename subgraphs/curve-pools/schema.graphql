type Platform @entity {
  id: ID!
  poolCount: BigInt!
  curvePools: [Pool!]! @derivedFrom(field: "platform")
  revenue: [RevenueWeeklySnapshot!] @derivedFrom(field: "platform")
}

type RevenueWeeklySnapshot @entity {
  id: ID!
  timestamp: BigInt!
  platform: Platform!
  crvRevenueAmount: BigInt!
  crvRevenueValue: BigDecimal!
  crvRevenueToLpProvidersAmount: BigInt! # pool.crvRewards
  crvRevenueToLpProvidersValue: BigInt!
  crvRevenueToCvxCrvStakersAmount: BigInt! # lockRewards / _lockIncentive
  crvRevenueToCvxCrvStakersValue: BigDecimal!
  crvRevenueToCvxStakersAmount: BigInt! # stakerRewards / _stakerIncentive
  crvRevenueToCvxStakersValue: BigDecimal!
  feesRevenueAmount: BigInt!
  feesRevenueValue: BigDecimal!
  extraTokenRewards: [ExtraTokenReward!]! @derivedFrom(field: "revenueSnapshot")
}

type ExtraTokenReward @entity {
  id: ID!
  revenueSnapshot: RevenueWeeklySnapshot!
  token: Bytes! #address
  amount: BigInt!
  value: BigDecimal!
}

type Deposit @entity {
  id: ID!
  user: User! # address
  poolid: Pool!
  amount: BigInt! # uint256
  timestamp: BigInt!
}

type Withdrawal @entity {
  id: ID!
  user: User! # address
  poolid: Pool!
  amount: BigInt! # uint256
  timestamp: BigInt!
}


type User @entity {
  id: ID!
  address: Bytes!
  withdrawals: [Withdrawal!] @derivedFrom(field: "user")
  deposits: [Deposit!] @derivedFrom(field: "user")
}

type ExtraReward @entity {
  id: ID!
  poolid: Pool!
  contract: Bytes! #address
  token: Bytes! #address
}

type Pool @entity {
  id: ID!
  poolid: BigInt!
  platform: Platform!
  name: String!
  lpToken: Bytes! #address
  lpTokenBalance: BigInt!
  token: Bytes! #address
  gauge: Bytes! #address
  crvRewardsPool: Bytes! #address
  stash: Bytes! #address
  stashVersion: BigInt!
  stashMinorVersion: BigInt!
  active: Boolean!
  creationDate: BigInt!
  creationBlock: BigInt!
  tvl: BigDecimal!
  crvApr: BigDecimal!
  cvxApr: BigDecimal!
  extraRewardsApr: BigDecimal!
  baseApr: BigDecimal!
  " TODO: set up relations "
  deposits: [Deposit!] @derivedFrom(field: "poolid")
  withdrawals: [Withdrawal!] @derivedFrom(field: "poolid")
  " Curve swap pool "
  swap: Bytes! #address
  " Underlying asset type (USD, BTC...) "
  assetType: Int!
  " Extra reward contracts "
  extras: [String!]!
  extraRewards: [ExtraReward!] @derivedFrom(field: "poolid")
  coins: [Bytes!]! #address
  snapshots: [DailyPoolSnapshot!] @derivedFrom(field: "poolid")
}

type DailyPoolSnapshot @entity {
  id: ID!
  poolid: Pool!
  poolName: String!
  withdrawalCount: BigInt!
  depositCount: BigInt!
  withdrawalVolume: BigInt!
  depositVolume: BigInt!
  withdrawalValue: BigDecimal!
  depositValue: BigDecimal!
  lpTokenBalance: BigInt!
  lpTokenVirtualPrice: BigDecimal!
  tvl: BigDecimal!
  crvApr: BigDecimal!
  cvxApr: BigDecimal!
  extraRewardsApr: BigDecimal!
  baseApr: BigDecimal!
  timestamp: BigInt!
}

