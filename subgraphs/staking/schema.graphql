type StakingContract @entity {
  id: ID!
  name: String!
  tokenBalance: BigInt!
  snapshots: [DailySnapshot!] @derivedFrom(field: "contract")
}

type DailySnapshot @entity {
  id: ID!
  contract: StakingContract!
  tokenBalance: BigInt!
  tvl: BigDecimal!
  crvApr: BigDecimal!
  cvxApr: BigDecimal!
  extraRewardsApr: [ExtraRewardApr!]! @derivedFrom(field: "snapshot")
  timestamp: BigInt!
}


type ExtraRewardApr @entity {
  id: ID!
  snapshot: DailySnapshot!
  token: Bytes! #address
  tokenName: String!
  apr: BigDecimal!
}

type Deposit @entity {
  id: ID!
  user: User! # address
  contract: StakingContract!
  amount: BigInt! # uint256
  timestamp: BigInt!
}

type Withdrawal @entity {
  id: ID!
  user: User! # address
  contract: StakingContract!
  amount: BigInt! # uint256
  timestamp: BigInt!
}

type User @entity {
  id: ID!
  address: Bytes!
  withdrawals: [Withdrawal!] @derivedFrom(field: "user")
  deposits: [Deposit!] @derivedFrom(field: "user")
}